@model IEnumerable<CustomerDAL.tblCustomer>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<style>
    .highlight {
        background-color: #00FFFF;
    }
</style>
<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.CustomerName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.CustomerAge)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.CustomerName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CustomerAge)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.CustomerID }) |
                @Html.ActionLink("Details", "Details", new { id = item.CustomerID }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.CustomerID })
            </td>
        </tr>

    }
</table>
<input type="text" id="search" />
<script>
    //$("#search").change(function () {
    //    debugger;
    //    var removeHighlight = function () {
    //        $('span.highlight').contents().unwrap();
    //    };

    //    var wrapContent = function (index, $el, text) {
    //        var $highlight = $('<span class="highlight"/>')
    //            .text(text.substring(0, index));
    //        //console.log(text.substring(0, index));
    //        var normalText = document.createTextNode(text.substring(index, text.length));
    //        //console.log(index, $highlight.text(), normalText);
    //        $el.html($highlight).append(normalText);
    //    };

    //    var highlightTextInTable = function ($tableElements, searchText) {
    //        // highlights if text found (during typing)
    //        var matched = false;
    //        //remove spans
    //        removeHighlight();

    //        $.each($tableElements, function (index, item) {
    //            var $el = $(item);
    //            if ($el.text().toLowerCase().search(searchText.toLowerCase()) != -1 && !matched) {
    //                //console.log("matched", $el, $el.html());
    //                wrapContent(searchText.length, $el, $el.html());
    //                console.log($el.text().toLowerCase());
    //                if (searchText.toLowerCase() == $el.text().toLowerCase()) {
    //                    // found the entry
    //                    //console.log("matched");
    //                    matched = true;
    //                }
    //            }
    //        });
    //    };

    //    $(function () {
    //        //load table into object
    //        var $tableRows = $('table tr');
    //        var $tableElements = $tableRows.children();

    //        console.log($tableRows, $tableElements);

    //        $('#search').on('keyup', function (e) {
    //            var searchText = $(this).val();
    //            if (searchText.length == 0) {
    //                // catches false triggers with empty input (e.g. backspace delete or case lock switch would trigger the function)
    //                removeHighlight(); // remove last remaining highlight
    //                return;
    //            }
    //            //findTextInTable($tableElements, searchText);

    //            highlightTextInTable($tableElements, searchText);

    //        });
    //    });

    //});
    (function () {
        var removeHighlight = function () {
            $('span.highlight').contents().unwrap();
        };

        var wrapContent = function (index, $el, text) {
            var $highlight = $('<span class="highlight"/>')
                .text(text.substring(0, index));
            //console.log(text.substring(0, index));
            var normalText = document.createTextNode(text.substring(index, text.length));
            //console.log(index, $highlight.text(), normalText);
            $el.html($highlight).append(normalText);
        };

        var highlightTextInTable = function ($tableElements, searchText) {
            // highlights if text found (during typing)
            var matched = false;
            //remove spans
            removeHighlight();

            $.each($tableElements, function (index, item) {
                var $el = $(item);
                if ($el.text().toLowerCase().search(searchText.toLowerCase()) != -1 && !matched) {
                    //console.log("matched", $el, $el.html());
                    wrapContent(searchText.length, $el, $el.html());
                    console.log($el.text().toLowerCase());
                    if (searchText.toLowerCase() == $el.text().toLowerCase()) {
                        // found the entry
                        //console.log("matched");
                        matched = true;
                    }
                }
            });
        };

        $(function () {
            //load table into object
            var $tableRows = $('table tr');
            var $tableElements = $tableRows.children();

            console.log($tableRows, $tableElements);

            $('#search').on('keyup', function (e) {
                var searchText = $(this).val();
                if (searchText.length == 0) {
                    // catches false triggers with empty input (e.g. backspace delete or case lock switch would trigger the function)
                    removeHighlight(); // remove last remaining highlight
                    return;
                }
                //findTextInTable($tableElements, searchText);

                highlightTextInTable($tableElements, searchText);

            });
        });

    })();
</script>
